#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ctrl-exam:server');
var http = require('http');
var cfg = require('../config/cfg');

/* DB 관련 */
const mysql = require('mysql2/promise');
const pool = mysql.createPool(cfg.db);
var isEmpty = require('is-empty');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

//socketio 설정
var io = require('socket.io')(server);
var roomName;
io.on('connection', function (socket) {
    console.log('connect');

    socket.on('join',function (data) {
        console.log(data);
        socket.join(data.roomName);
        roomName = data.roomName;
    });

    socket.on('select',  async function () {

         //데이터 삽입
         try {
            const connection = await pool.getConnection(async conn => conn);
            // connection.query( 'select * from location_tb');
            try {
                let query ="select * from location_tb";
                const [rows] = await connection.query(query);
                console.log("조회 성공 :소켓");
                io.sockets.in(roomName).emit('receive', { result: rows});
        
            } catch(err) {
                console.log('Query Error : ' + err);
            }
        } catch(err) {
            console.log('DB Error : ' + err);

        }

       
    })

    socket.on('update',  async function () {

      console.log("업데이트 성공:소켓");
      io.sockets.in(roomName).emit('updateRec');

    
    })
});




/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
